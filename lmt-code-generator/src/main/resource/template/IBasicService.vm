/**
 * Generate by lmt-code-generator $date
 * you can find lmt-code-generator project on github, please visit:
 *
 */
package ${tableBean.basicServiceApiPackage};

#foreach(${cb} in ${tableBean.pkColumnBeanList})
#if(${cb.importClass})
import ${cb.importClass}
#end
#end
import com.github.pagehelper.PageInfo;
import ${tableBean.entityClassFullName};

import java.util.List;

/**
 * @description ${tableBean.basicServiceApiClassName}服务接口定义
 *
 * @author Generate by lmt-code-generator
 * @date $date
 * @since JDK1.8
 */
public interface ${tableBean.basicServiceApiClassName} {

    /**
     * @description 插入${tableBean.entityClassNameFirstLower}到数据表
     * @param ${tableBean.entityClassNameFirstLower}
     * @return int
     */
    public int insert($tableBean.entityClassName $tableBean.entityClassNameFirstLower);

    /**
     * @description 批量插入${tableBean.entityClassNameFirstLower}到数据表
     * @param ${tableBean.entityClassNameFirstLower}List
     * @return int
     */
    public int batchInsert(List<$tableBean.entityClassName> ${tableBean.entityClassNameFirstLower}List);
#set($i = 0)
#set($param = '')
#set($pk = '')
#foreach(${cb} in ${tableBean.pkColumnBeanList})
    #if($i == 0)
        #set($param = $param + "${cb.javaType} ${cb.javaName}")
        #set($i = $i + 1)
        #set($pk = $cb)
    #else
        #set($param = $param + ", ${cb.javaType} ${cb.javaName}")
    #end
#end

    /**
     * @description 根据主键id查寻${tableBean.entityClassName}实体
     * @return ${tableBean.entityClassName}
     */
    public ${tableBean.entityClassName} get(${param});
#if($i == 1)
    /**
     * @description 根据主键id列表查寻${tableBean.entityClassName}实体列表
     * @param ${pk.javaName}List
     * @return List<$tableBean.entityClassName>
     */
    public List<$tableBean.entityClassName> listByIdList(List<${pk.javaType}> ${pk.javaName}List);
#end
    /**
     * @description 根据主键id删除记录
     * @return int
     */
    public int deleteByPk(${param});

    /**
     * @description 根据实体删除记录
     * @param ${tableBean.entityClassNameFirstLower} 不能所有字段都为空，否则sql执行出错
     * @return int
     */
    public int delete($tableBean.entityClassName $tableBean.entityClassNameFirstLower);

    /**
     * @description 根据主键id更新记录
     * @param $tableBean.entityClassNameFirstLower    主键id字段不能为空
     * @return int
     */
    public int update($tableBean.entityClassName $tableBean.entityClassNameFirstLower);


    /**
     * @description 根据主实体统计记录数
     * @param $tableBean.entityClassNameFirstLower
     * @return int
     */
    public long count($tableBean.entityClassName $tableBean.entityClassNameFirstLower);

    /**
     * @description 根据主实体查询记录
     * @param $tableBean.entityClassNameFirstLower
     * @return int
     */
    public List<$tableBean.entityClassName> query($tableBean.entityClassName $tableBean.entityClassNameFirstLower);

    /**
     * @description 根据主实体查询记录，根据指定的字段进行排序
     * @param $tableBean.entityClassNameFirstLower
     * @param sortField 排序字段(可空)
     * @param sortOrder asc或desc(可空)
     * @return int
     */
    public List<$tableBean.entityClassName> queryOrderBy($tableBean.entityClassName $tableBean.entityClassNameFirstLower, String sortField, String sortOrder);

    /**
     * 更新或保存
     * @param $tableBean.entityClassNameFirstLower
     * @return
     */
    public int saveOrUpdate($tableBean.entityClassName $tableBean.entityClassNameFirstLower);

    /**
     * 分页查寻
     * @param $tableBean.entityClassNameFirstLower
     * @param sortField  排序字段名
     * @param sortOrder  排序顺序
     * @param pageNum    页码
     * @param pageSize   每页记录数
     * @return
     */
    public PageInfo<$tableBean.entityClassName> queryByPage($tableBean.entityClassName $tableBean.entityClassNameFirstLower, String sortField, String sortOrder, int pageNum, int pageSize);

}
