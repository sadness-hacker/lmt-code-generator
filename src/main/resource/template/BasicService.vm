/**
 * Generate by lmt-code-generator ${date}
 * you can find lmt-code-generator project on github, please visit:
 *
 */
package ${tableBean.basicServicePackage};

#foreach(${cb} in ${tableBean.pkColumnBeanList})
#if(${cb.importClass})
import ${cb.importClass}
#end
#end
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import ${tableBean.basicMapperClassFullName};
import ${tableBean.basicServiceApiClassFullName};
import ${tableBean.entityClassFullName};
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
/**
 * @description ${tableBean.entityClassName}基础Service实现
 * @author Generate by lmt-code-generator
 * @date $date
 * @since JDK 1.8
 */
public class ${tableBean.basicServiceClassName} implements ${tableBean.basicServiceApiClassName} {

    @Autowired
    private ${tableBean.basicMapperClassFullName} ${tableBean.basicMapperClassNameFirstLower};

    /**
     * @description 插入${tableBean.entityClassNameFirstLower}到数据表
     * @param $tableBean.entityClassNameFirstLower
     * @return int
     *
     */
    public int insert($tableBean.entityClassName ${tableBean.entityClassNameFirstLower}) {
        return ${tableBean.basicMapperClassNameFirstLower}.insert(${tableBean.entityClassNameFirstLower});
    }

    /**
     * @description 批量插入${tableBean.entityClassNameFirstLower}到数据表
     * @param ${tableBean.entityClassNameFirstLower}List
     * @return int
     */
    public int batchInsert(List<${tableBean.entityClassName}> ${tableBean.entityClassNameFirstLower}List) {
        return ${tableBean.basicMapperClassNameFirstLower}.batchInsert(${tableBean.entityClassNameFirstLower}List);
    }
#set($i = 0)
#set($param = '')
#set($paramName = '')
#set($pk = '')
#foreach(${cb} in ${tableBean.pkColumnBeanList})
    #if($i == 0)
        #set($param = $param + "${cb.javaType} ${cb.javaName}")
        #set($paramName = ${paramName} + ${cb.javaName})
        #set($i = $i + 1)
        #set($pk = $cb)
    #else
        #set($param = $param + ", ${cb.javaType} ${cb.javaName}")
        #set($paramName = ${paramName} + ", ${cb.javaName}")
    #end
#end

    /**
     * @description 根据主键id查寻${tableBean.entityClassName}实体
     * @param ${paramName}
     * @return ${tableBean.entityClassName}
     */
    public ${tableBean.entityClassName} get(${param}) {
        return ${tableBean.basicMapperClassNameFirstLower}.get(${paramName});
    }
#if($i == 1)
    /**
     * @description 根据主键id列表查寻${tableBean.entityClassName}实体列表
     * @param ${pk.javaName}List
     * @return List<${tableBean.entityClassName}>
     *
     */
    public List<${tableBean.entityClassName}> listByIdList(List<${pk.javaType}> ${pk.javaName}List) {
        return ${tableBean.basicMapperClassNameFirstLower}.listByIdList(${pk.javaName}List);
    }
#end
    /**
     * @description 根据主键删除记录
     * @param ${paramName}
     * @return int
     */
    public int deleteByPk(${param}) {
        return ${tableBean.basicMapperClassNameFirstLower}.deleteByPk(${paramName});
    }

    /**
     * @description 根据实体删除记录
     * @param ${tableBean.entityClassNameFirstLower}
     * @return int
     */
    public int delete(${tableBean.entityClassName} ${tableBean.entityClassNameFirstLower}) {
        return ${tableBean.basicMapperClassNameFirstLower}.delete(${tableBean.entityClassNameFirstLower});
    }

    /**
     * @param ${tableBean.entityClassNameFirstLower}
     * @return int
     * @description 根据主键id更新记录
     */
    public int update(${tableBean.entityClassName} ${tableBean.entityClassNameFirstLower}) {
        return ${tableBean.basicMapperClassNameFirstLower}.update(${tableBean.entityClassNameFirstLower});
    }

    /**
     * @description 根据主实体统计记录数
     * @param ${tableBean.entityClassNameFirstLower}
     * @return long
     */
    public long count(${tableBean.entityClassName} ${tableBean.entityClassNameFirstLower}) {
        return ${tableBean.basicMapperClassNameFirstLower}.count(${tableBean.entityClassNameFirstLower});
    }

    /**
     * @description 根据主实体查询记录
     * @param ${tableBean.entityClassNameFirstLower}
     * @return List<${tableBean.entityClassName}>
     */
    public List<${tableBean.entityClassName}> query(${tableBean.entityClassName} ${tableBean.entityClassNameFirstLower}) {
        return ${tableBean.basicMapperClassNameFirstLower}.query(${tableBean.entityClassNameFirstLower});
    }

    /**
     * @description 根据主实体查询记录，根据指定的字段进行排序
     * @param ${tableBean.entityClassNameFirstLower}
     * @param sortField 排序字段(可空)
     * @param sortOrder asc或desc(可空)
     * @return int
     */
    public List<${tableBean.entityClassName}> queryOrderBy(${tableBean.entityClassName} ${tableBean.entityClassNameFirstLower}, String sortField, String sortOrder) {
        return ${tableBean.basicMapperClassNameFirstLower}.queryOrderBy($tableBean.entityClassNameFirstLower, sortField, sortOrder);
    }
#set($i = 0)
#set($param = '')
#set($paramName = '')
#foreach(${cb} in ${tableBean.pkColumnBeanList})
    #if($i == 0)
        #set($param = $param + "${tableBean.entityClassNameFirstLower}.get${cb.javaNameFirstUpper}() == null")
        #set($paramName = ${paramName} + "${tableBean.entityClassNameFirstLower}.get${cb.javaNameFirstUpper}()")
        #set($i = $i + 1)
    #else
        #set($param = $param + "|| ${tableBean.entityClassNameFirstLower}.get${cb.javaNameFirstUpper}() == null")
        #set($paramName = ${paramName} + ", ${tableBean.entityClassNameFirstLower}.get${cb.javaNameFirstUpper}()")
    #end
#end

    /**
     * 更新或保存
     *
     * @param ${tableBean.entityClassNameFirstLower}
     * @return
     */
    public int saveOrUpdate(${tableBean.entityClassName} ${tableBean.entityClassNameFirstLower}) {
        if(${param} || get(${paramName}) == null) {
            return insert(${tableBean.entityClassNameFirstLower});
        } else {
            return update(${tableBean.entityClassNameFirstLower});
        }
    }

    /**
     * 分页查寻
     * @param ${tableBean.entityClassNameFirstLower}
     * @param sortField 排序字段名
     * @param sortOrder 排序顺序
     * @param pageNum   页面
     * @param pageSize  每页记录数
     * @return
     */
    public PageInfo<${tableBean.entityClassName}> queryByPage(${tableBean.entityClassName} ${tableBean.entityClassNameFirstLower}, String sortField, String sortOrder, int pageNum, int pageSize) {
        PageHelper.startPage(pageNum, pageSize);
        List<${tableBean.entityClassName}> list = queryOrderBy(${tableBean.entityClassNameFirstLower}, sortField, sortOrder);
        return new PageInfo<$tableBean.entityClassName>(list);
    }
}
