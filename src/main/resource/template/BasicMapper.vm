/**
 * Generate by lmt-code-generator ${date}
 * you can find lmt-code-generator project on github, please visit:
 *
 */
package ${tableBean.basicMapperPackage};
#foreach(${cb} in ${tableBean.pkColumnBeanList})
#if(${cb.importClass})
import ${cb.importClass}
#end
#end
import ${tableBean.entityClassFullName};
import org.apache.ibatis.annotations.Param;

import java.util.List;

/**
 *
 * @description ${tableBean.entityClassName}基础Mapper接口
 * @author Generate by lmt-code-generator
 * @date ${date}
 * @since JDK 1.8
 *
 */
public interface Basic${tableBean.entityClassName}Mapper {

    /**
     * @description 插入${tableBean.entityClassNameFirstLower}到数据表
     * @param ${tableBean.entityClassNameFirstLower}
     * @return int
     */
    public int insert(@Param(value = "$tableBean.entityClassNameFirstLower") $tableBean.entityClassName $tableBean.entityClassNameFirstLower);

    /**
     * @description 批量插入${tableBean.entityClassNameFirstLower}到数据表
     * @param ${tableBean.entityClassNameFirstLower}List
     * @return int
     */
    public int batchInsert(List<${tableBean.entityClassName}> ${tableBean.entityClassNameFirstLower}List);

##主键字段列表
#set($i = 0)
#set($param = '')
#set($pk = '')
#foreach(${cb} in ${tableBean.pkColumnBeanList})
    #if($i == 0)
        #set($param = $param + '@Param(value = "' + "${cb.javaName}" + '")' + " ${cb.javaType} ${cb.javaName}")
        #set($i = $i + 1)
        #set($pk = $cb)
    #else
        #set($param = $param + ',@Param(value = "' + "${cb.javaName}" + '")' + " ${cb.javaType} ${cb.javaName}")
    #end
#end

    /**
     * @description 根据主键id查寻${tableBean.entityClassName}实体
     * @param ${pk.javaName}
     *
     * @return ${tableBean.entityClassName}
     */
    public ${tableBean.entityClassName} get($param);


#if($i == 1)
    /**
     * @description 根据主键id列表查寻${tableBean.entityClassName}实体列表
     * @param ${pk.javaName}List
     * @return List<${tableBean.entityClassName}>
     */
    public List<${tableBean.entityClassName}> listByIdList(List<$pk.javaType> ${pk.javaName}List);
#end

    /**
     * @description 根据主键id删除记录
     * @param $param (非空)
     * @return int
     */
    public int deleteByPk($param);

    /**
     * @description 根据实体删除记录
     * @param ${tableBean.entityClassNameFirstLower} 不能所有字段都为空，否则sql执行出错
     * @return int
     */
    public int delete(@Param(value = "$tableBean.entityClassNameFirstLower") ${tableBean.entityClassName} ${tableBean.entityClassNameFirstLower});

    /**
     * @description 根据主键id更新记录
     * @param ${tableBean.entityClassNameFirstLower}    主键id字段不能为空
     * @return int
     */
    public int update(@Param(value = "$tableBean.entityClassNameFirstLower") ${tableBean.entityClassName} ${tableBean.entityClassNameFirstLower});


    /**
     * @description 根据主实体统计记录数
     * @param ${tableBean.entityClassNameFirstLower}
     * @return int
     */
    public long count(@Param(value = "$tableBean.entityClassNameFirstLower") ${tableBean.entityClassName} ${tableBean.entityClassNameFirstLower});

    /**
     * @description 根据主实体查询记录
     * @param ${tableBean.entityClassNameFirstLower}
     * @return int
     */
    public List<${tableBean.entityClassName}> query(@Param(value = "$tableBean.entityClassNameFirstLower") ${tableBean.entityClassName} ${tableBean.entityClassNameFirstLower});

    /**
     * @description 根据主实体查询记录，根据指定的字段进行排序
     * @param ${tableBean.entityClassNameFirstLower}
     * @param sortField 排序字段
     * @param sortOrder asc或desc
     * @return List<${tableBean.entityClassName}>
     */
    public List<$tableBean.entityClassName> queryOrderBy(
                    @Param(value = "${tableBean.entityClassNameFirstLower}") ${tableBean.entityClassName} ${tableBean.entityClassNameFirstLower},
                    @Param(value = "sortField") String sortField,
                    @Param(value = "sortOrder") String sortOrder);

}
